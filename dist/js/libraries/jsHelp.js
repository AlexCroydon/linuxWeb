function help(){return"\n===============\n\nArray Methods||\n\n===============\n\n\n\nconcat() — Join several arrays into one\n\nindexOf() — Returns the primitive value of the specified object\n\njoin() — Combine elements of an array into a single string and return\n\nthe string\n\nlastIndexOf() — Gives the last position at which a given element\n\nappears in an array\n\npop() — Removes the last element of an array\n\npush() — Add a new element at the end\n\nreverse() — Sort elements in descending order\n\nshift() — Remove the first element of an array\n\nslice() — Pulls a copy of a portion of an array into a new array\n\nsort() — Sorts elements alphabetically\n\nsplice() — Adds elements in a specified way and position\n\ntoString() — Converts elements to strings\n\nunshift() — Adds a new element to the beginning\n\nvalueOf() — Returns the first position at which a given element\n\nappears in an array\n\n\n\n===========\n\nOPERATORS||\n\n===========\n\n\n\n-------------------------------------------\n\nBasic Operators\n\n-------------------------------------------\n\n+ — Addition\n\n- — Subtraction\n\n* — Multiplication\n\n/ — Division\n\n(...) — Grouping operator, operations within brackets are executed\n\nearlier than those outside\n\n% — Modulus (remainder )\n\n++ — Increment numbers\n\n-- — Decrement numbers\n\nComparison Operators\n\n== — Equal to\n\n=== — Equal value and equal type\n\n!= — Not equal\n\n!== — Not equal value or not equal type\n\n> — Greater than\n\n< — Less than\n\n>= — Greater than or equal to\n\n<= — Less than or equal to\n\n? — Ternary operator\n\n\n\n-------------------------------------------\n\nLogical Operators\n\n-------------------------------------------\n\ndocument.write() — Write directly to the HTML document\n\nprompt() — Creates an dialogue for user input\n\nGlobal Functions\n\ndecodeURI() — Decodes a Uniform Resource Identifier (URI) created\n\nby encodeURI or similar\n\ndecodeURIComponent() — Decodes a URI component\n\nencodeURI() — Encodes a URI into UTF-8\n\nencodeURIComponent() — Same but for URI components\n\neval() — Evaluates JavaScript code represented as a string\n\nisFinite() — Determines whether a passed value is a finite number\n\nisNaN() — Determines whether a value is NaN or not\n\nNumber() — Returns a number converted from its argument\n\nparseFloat() — Parses an argument and returns a floating point number\n\nparseInt() — Parses its argument and returns an integer\n\nJAVASCRIPT LOOPS\n\nfor (before loop; condition for loop; execute after loop) {\n\n // what to do during the loop\n\n}\n\nfor — The most common way to create a loop in JavaScript\n\nwhile — Sets up conditions under which aloop executes\n\ndo while — Similar to the while loop, however, it executes at least\n\nonce and performs a check at the end to see if the condition is met\n\nto execute again\n\nbreak — Used to stop and exit the cycle at certain conditions\n\ncontinue — Skip parts of the cycle if certain conditions are met\n\n\n\n-------------------------------------------\n\nIF - ELSE STATEMENTS\n\n-------------------------------------------\n\nif (condition) {\n\n // what to do if condition is met\n\n} else {\n\n // what to do if condition is not met\n\n}\n\n\n\n=========\n\nSTRINGS||\n\n=========\n\nvar person = \\John Doe\\;\n\nEscape Characters\n\n' — Single quote\n\n\\ — Double quote\n\n\\\\ — Backslash\n\n\\\\b — Backspace\n\n\\\\f — Form feed\n\n\\\n — New line\n\n\\\\r — Carriage return\n\n\\\\t — Horizontal tabulator\n\n\\\\v — Vertical tabulator\n\n\n\n-------------------------------------------\n\nString Methods\n\n-------------------------------------------\n\ncharAt() — Returns a character at a specified position inside a\n\nstring\n\ncharCodeAt() — Gives you the unicode of character at that position\n\nconcat() — Concatenates (joins) two or more strings into one\n\nfromCharCode() — Returns a string created from the specified sequence\n\nof UTF-16 code units\n\nindexOf() — Provides the position of the first occurrence of a\n\nspecified text within a string\n\nlastIndexOf() — Same as indexOf() but with the last occurrence,\n\nsearching backwards\n\nmatch() — Retrieves the matches of a string against a search pattern\n\nreplace() — Find and replace specified text in a string\n\nsearch() — Executes a search for a matching text and returns its\n\nposition\n\nslice() — Extracts a section of a string and returns it as a new\n\nstring\n\nsplit() — Splits a string object into an array of strings at a\n\nspecified position\n\nsubstr() — Similar to slice() but extracts a substring depended on a\n\nspecified number of characters\n\nsubstring() — Also similar to slice() but can’t accept negative\n\nindices\n\ntoLowerCase() — Convert strings to lower case\n\ntoUpperCase() — Convert strings to upper case\n\nvalueOf() — Returns the primitive value (that has no properties or\n\nmethods) of a string object\n\n\n\n===========================\n\nREGULAR EXPRESSION SYNTAX||\n\n===========================\n\n\n\n-------------------------------------------\n\nPattern Modifiers\n\n-------------------------------------------\n\ne — Evaluate replacement\n\ni — Perform case-insensitive matching\n\ng — Perform global matching\n\nm — Perform multiple line matching\n\ns — Treat strings as single line\n\nx — Allow comments and whitespace in pattern\n\nU — Ungreedy pattern\n\nBrackets\n\n[abc] — Find any of the characters between the brackets\n\n[^abc] — Find any character not in the brackets\n\n[0-9] — Used to find any digit from 0 to 9\n\n[A-z] — Find any character from uppercase A to lowercase z\n\n(a|b|c) — Find any of the alternatives separated with |\n\n-------------------------------------------\n\nMetacharacters\n\n-------------------------------------------\n\n. — Find a single character, except newline or line terminator\n\n\\\\w — Word character\n\n\\\\W — Non-word character\n\n\\\\d — A digit\n\n\\\\D — A non-digit character\n\n\\\\s — Whitespace character\n\n\\\\S — Non-whitespace character\n\n\\\\b — Find a match at the beginning/end of a word\n\n\\\\B — A match not at the beginning/end of a word\n\n\\\\0 — NUL character\n\n\\\n — A new line character\n\n\\\\f — Form feed character\n\n\\\\r — Carriage return character\n\n\\\\t — Tab character\n\n\\\\v — Vertical tab character\n\n\\\\xxx — The character specified by an opromptl number xxx\n\n\\\\xdd — Character specified by a hexadecimal number dd\n\n\\\\uxxxx — The Unicode character specified by a hexadecimal number xxxx\n\n\n\n-------------------------------------------\n\nQuantifiers\n\n-------------------------------------------\n\nn+ — Matches any string that contains at least one n\n\nn* — Any string that contains zero or more occurrences of n\n\nn? — A string that contains zero or one occurrences of n\n\nn{X} — String that contains a sequence of X n’s\n\nn{X,Y} — Strings that contains a sequence of X to Y n’s\n\nn{X,} — Matches any string that contains a sequence of at least X n’s\n\nn$ — Any string with n at the end of it\n\n^n — String with n at the beginning of it\n\n?=n — Any string that is followed by a specific string n\n\n?!n — String that is not followed by a specific string n\n\n\n\n==================\n\nNUMBERS AND MATH||\n\n==================\n\n\n\n-------------------------------------------\n\nNumber Properties\n\n-------------------------------------------\n\nMAX_VALUE — The maximum numeric value representable in JavaScript\n\nMIN_VALUE — Smallest positive numeric value representable in\n\nJavaScript\n\nNaN — The “Not-a-Number” value\n\nNEGATIVE_INFINITY — The negative Infinity value\n\nPOSITIVE_INFINITY — Positive Infinity value\n\n\n\n-------------------------------------------\n\nNumber Methods\n\n-------------------------------------------\n\ntoExponential() — Returns a string with a rounded number written as\n\nexponential notation\n\ntoFixed() — Returns the string of a number with a specified number of\n\ndecimals\n\ntoPrecision() — String of a number written with a specified length\n\ntoString() — Returns a number as a string\n\nvalueOf() — Returns a number as a number\n\n\n\n-------------------------------------------\n\nMath Properties\n\n-------------------------------------------\n\nE — Euler’s number\n\nLN2 — The natural logarithm of 2\n\nLN10 — Natural logarithm of 10\n\nLOG2E — Base 2 logarithm of E\n\nLOG10E — Base 10 logarithm of E\n\nPI — The number PI\n\nSQRT1_2 — Square root of 1/2\n\nSQRT2 — The square root of 2\n\n\n\n-------------------------------------------\n\nMath Methods\n\n-------------------------------------------\n\nabs(x) — Returns the absolute (positive) value of x\n\nacos(x) — The arccosine of x, in radians\n\nasin(x) — Arcsine of x, in radians\n\natan(x) — The arpromptngent of x as a numeric value\n\natan2(y,x) — Arpromptngent of the quotient of its arguments\n\nceil(x) — Value of x rounded up to its nearest integer\n\ncos(x) — The cosine of x (x is in radians)\n\nexp(x) — Value of Ex\n\nfloor(x) — The value of x rounded down to its nearest integer\n\nlog(x) — The natural logarithm (base E) of x\n\nmax(x,y,z,...,n) — Returns the number with the highest value\n\nmin(x,y,z,...,n) — Same for the number with the lowest value\n\npow(x,y) — X to the power of y\n\nrandom() — Returns a random number between 0 and 1\n\nround(x) — The value of x rounded to its nearest integer\n\nsin(x) — The sine of x (x is in radians)\n\nsqrt(x) — Square root of x\n\ntan(x) — The tangent of an angle\n\n\n\n==================================\n\nDEALING WITH DATES IN JAVASCRIPT||\n\n==================================\n\n\n\n-------------------------------------------\n\nSetting Dates\n\n-------------------------------------------\n\nDate() — Creates a new date object with the current date and time\n\nDate(2017, 5, 21, 3, 23, 10, 0) — Create a custom date object. The\n\nnumbers represent year, month, day, hour, minutes, seconds,\n\nmilliseconds. You can omit anything you want except for year and\n\nmonth.\n\nDate(\\2017-06-23\\) — Date declaration as a string\n\nPulling Date and Time Values\n\ngetDate() — Get the day of the month as a number (1-31)\n\ngetDay() — The weekday as a number (0-6)\n\ngetFullYear() — Year as a four digit number (yyyy)\n\ngetHours() — Get the hour (0-23)\n\ngetMilliseconds() — The millisecond (0-999)\n\ngetMinutes() — Get the minute (0-59)\n\ngetMonth() — Month as a number (0-11)\n\ngetSeconds() — Get the second (0-59)\n\ngetTime() — Get the milliseconds since January 1, 1970\n\ngetUTCDate() — The day (date) of the month in the specified date\n\naccording to universal time (also available for day, month, fullyear,\n\nhours, minutes etc.)\n\nparse — Parses a string representation of a date, and returns the\n\nnumber of milliseconds since January 1, 1970\n\n\n\n-------------------------------------------\n\nSet Part of a Date\n\n-------------------------------------------\n\nsetDate() — Set the day as a number (1-31)\n\nsetFullYear() — Sets the year (optionally month and day)\n\nsetHours() — Set the hour (0-23)\n\nsetMilliseconds() — Set milliseconds (0-999)\n\nsetMinutes() — Sets the minutes (0-59)\n\nsetMonth() — Set the month (0-11)\n\nsetSeconds() — Sets the seconds (0-59)\n\nsetTime() — Set the time (milliseconds since January 1, 1970)\n\nsetUTCDate() — Sets the day of the month for a specified date\n\naccording to universal time (also available for day, month, fullyear,\n\nhours, minutes etc.)\n\n\n\n==========\n\nDOM MODE||\n\n==========\n\n\n\n-------------------------------------------\n\nNode Properties\n\n-------------------------------------------\n\nattributes — Returns a live collection of all attributes registered\n\nto and element\n\nbaseURI — Provides the absolute base URL of an HTML element\n\nchildNodes — Gives a collection of an element’s child nodes\n\nfirstChild — Returns the first child node of an element\n\nlastChild — The last child node of an element\n\nnextSibling — Gives you the next node at the same node tree level\n\nnodeName — Returns the name of a node\n\nnodeType — Returns the type of a node\n\nnodeValue — Sets or returns the value of a node\n\nownerDocument — The top-level document object for this node\n\nparentNode — Returns the parent node of an element\n\npreviousSibling — Returns the node immediately preceding the current\n\none\n\ntextContent — Sets or returns the textual content of a node and its\n\ndescendants\n\n\n\n-------------------------------------------\n\nNode Methods\n\n-------------------------------------------\n\nappendChild() — Adds a new child node to an element as the last child\n\nnode\n\ncloneNode() — Clones an HTML element\n\ncompareDocumentPosition() — Compares the document position of two\n\nelements\n\ngetFeature() — Returns an object which implements the APIs of a\n\nspecified feature\n\nhasAttributes() — Returns true if an element has any attributes,\n\notherwise false\n\nhasChildNodes() — Returns true if an element has any child nodes,\n\notherwise false\n\ninsertBefore() — Inserts a new child node before a specified,\n\nexisting child node\n\nisDefaultNamespace() — Returns true if a specified namespaceURI is\n\nthe default, otherwise false\n\nisEqualNode() — Checks if two elements are equal\n\nisSameNode() — Checks if two elements are the same node\n\nisSupported() — Returns true if a specified feature is supported on\n\nthe element\n\nlookupNamespaceURI() — Returns the namespaceURI associated with a\n\ngiven node\n\nlookupPrefix() — Returns a DOMString containing the prefix for a\n\ngiven namespaceURI, if present\n\nnormalize() — Joins adjacent text nodes and removes empty text nodes\n\nin an element\n\nremoveChild() — Remov\n\nsetAttributeNodeNS() — Adds a new namespaced attribute node to an\n\nelement\n\n\n\n===============================\n\nWORKING WITH THE USER BROWSER||\n\n===============================\n\n\n\n-------------------------------------------\n\nWindow Properties\n\n-------------------------------------------\n\nclosed — Checks whether a window has been closed or not and returns\n\ntrue or false\n\ndefaultStatus — Sets or returns the default text in the statusbar of\n\na window\n\ndocument — Returns the document object for the window\n\nframes — Returns all <iframe> elements in the current window\n\nhistory — Provides the History object for the window\n\ninnerHeight — The inner height of a window’s content area\n\ninnerWidth — The inner width of the content area\n\nlength — Find out the number of <iframe> elements in the window\n\nlocation — Returns the location object for the window\n\nname — Sets or returns the name of a window\n\nnavigator — Returns the Navigator object for the window\n\nopener — Returns a reference to the window that created the window\n\nouterHeight — The outer height of a window, including toolbars/\n\nscrollbars\n\nouterWidth — The outer width of a window, including toolbars/\n\nscrollbars\n\npageXOffset — Number of pixels the current document has been scrolled\n\nhorizontally\n\npageYOffset — Number of pixels the document has been scrolled\n\nvertically\n\nparent — The parent window of the current window\n\nscreen — Returns the Screen object for the window\n\nscreenLeft — The horizontal coordinate of the window (relative to\n\nscreen)\n\nscreenTop — The vertical coordinate of the window\n\nscreenX — Same as screenLeft but needed for some browsers\n\nscreenY — Same as screenTop but needed for some browsers\n\nself — Returns the current window\n\nstatus — Sets or returns the text in the statusbar of a window\n\ntop — Returns the topmost browser window\n\n\n\n-------------------------------------------\n\nWindow Methods\n\n-------------------------------------------\n\nalert() — Displays an alert box with a message and an OK button\n\nblur() — Removes focus from the current window\n\nclearInterval() — Clears a timer set with setInterval()\n\nclearTimeout() — Clears a timer set with setTimeout()\n\nclose() — Closes the current window\n\nconfirm() — Displays a dialogue box with a message and\n\nan OK and Cancelbutton\n\nfocus() — Sets focus to the current window\n\nmoveBy() — Moves a window relative to its current position\n\nmoveTo() — Moves a window to a specified position\n\nopen() — Opens a new browser window\n\nprint() — Prints the content of the current window\n\nprompt() — Displays a dialogue box that prompts the visitor for input\n\nresizeBy() — Resizes the window by the specified number of pixels\n\nresizeTo() — Resizes the window to a specified width and height\n\nscrollBy() — Scrolls the document by a specified number of pixels\n\nscrollTo() — Scrolls the document to specified coordinates\n\nsetInterval() — Calls a function or evaluates an expression at\n\nspecified intervals\n\nsetTimeout() — Calls a function or evaluates an expression after a\n\nspecified interval\n\nstop() — Stops the window from loading\n\nScreen Properties\n\navailHeight — Returns the height of the screen (excluding the Windows\n\nTaskbar)\n\navailWidth — Returns the width of the screen (excluding the Windows\n\nTaskbar)\n\ncolorDepth — Returns the bit depth of the color palette for\n\ndisplaying images\n\nheight — The total height of the screen\n\npixelDepth — The color resolution of the screen in bits per pixel\n\nwidth — The total width of the screen\n\n\n\n===================\n\nJAVASCRIPT EVENTS||\n\n===================\n\n\n\n-------------------------------------------\n\nMouse\n\n-------------------------------------------\n\nonclick — The event occurs when the user clicks on an element\n\noncontextmenu — User right-clicks on an element to open a context\n\nmenu\n\nondblclick — The user double-clicks on an element\n\nonmousedown — User presses a mouse button over an element\n\nonmouseenter — The pointer moves onto an element\n\nonmouseleave — Pointer moves out of an element\n\nonmousemove — The pointer is moving while it is over an element\n\nonmouseover — When the pointer is moved onto an element or one of its\n\nchildren\n\nonmouseout — User moves the mouse pointer out of an element or one of\n\nits children\n\nonmouseup — The user releases a mouse button while over an element\n\n-------------------------------------------\n\nKeyboard\n\n-------------------------------------------\n\nonkeydown — When the user is pressing a key down\n\nonkeypress — The moment the user starts pressing a key\n\nonkeyup — The user releases a key\n\n\n\n-------------------------------------------\n\nFrame\n\n-------------------------------------------\n\nonabort — The loading of a media is aborted\n\nonbeforeunload — Event occurs before the document is about to be\n\nunloaded\n\nonerror — An error occurs while loading an external file\n\nonhashchange — There have been changes to the anchor part of a URL\n\nonload — When an object has loaded\n\nonpagehide — The user navigates away from a webpage\n\nonpageshow — When the user navigates to a webpage\n\nonresize — The document view is resized\n\nonscroll — An element’s scrollbar is being scrolled\n\nonunload — Event occurs when a page has unloaded\n\n\n\n-------------------------------------------\n\nForm\n\n-------------------------------------------\n\nonblur — When an element loses focus\n\nonchange — The content of a form element changes\n\n(for <input>, <select>and <textarea>)\n\nonfocus — An element gets focus\n\nonfocusin — When an element is about to get focus\n\nonfocusout — The element is about to lose focus\n\noninput — User input on an element\n\noninvalid — An element is invalid\n\nonreset — A form is reset\n\nonsearch — The user writes something in a search field\n\n(for <input=\\search\\>)\n\nonselect — The user selects some text (for <input> and <textarea>)\n\nonsubmit — A form is submitted\n\n\n\n-------------------------------------------\n\nDrag\n\n-------------------------------------------\n\nondrag — An element is dragged\n\nondragend — The user has finished dragging the element\n\nondragenter — The dragged element enters a drop target\n\nondragleave — A dragged element leaves the drop target\n\nondragover — The dragged element is on top of the drop target\n\nondragstart — User starts to drag an element\n\nondrop — Dragged element is dropped on the drop target\n\nClipboard\n\noncopy — User copies the content of an element\n\noncut — The user cuts an element’s content\n\nonpaste — A user pastes content in an element\n\n\n\n-------------------------------------------\n\nMedia\n\n-------------------------------------------\n\nonabort — Media loading is aborted\n\noncanplay — The browser can start playing media (e.g. a file has\n\nbuffered enough)\n\noncanplaythrough — When browser can play through media without\n\nstopping\n\nondurationchange — The duration of the media changes\n\nonended — The media has reach its end\n\nonerror — Happens when an error occurs while loading an external file\n\nonloadeddata — Media data is loaded\n\nonloadedmetadata — Meta data (like dimensions and duration) are\n\nloaded\n\nonloadstart — Browser starts looking for specified media\n\nonpause — Media is paused either by the user or automatically\n\nonplay — The media has been started or is no longer paused\n\nonplaying — Media is playing after having been paused or stopped for\n\nbuffering\n\nonprogress — Browser is in the process of downloading the media\n\nonratechange — The playing speed of the media changes\n\nonseeked — User is finished moving/skipping to a new position in the\n\nmedia\n\nonseeking — The user starts moving/skipping\n\nonstalled — The browser is trying to load the media but it is not\n\navailable\n\nonsuspend — Browser is intentionally not loading media\n\nontimeupdate — The playing position has changed (e.g. because of fast\n\nforward)\n\nonvolumechange — Media volume has changed (including mute)\n\nonwaiting — Media paused but expected to resume (for example,\n\nbuffering)\n\nAnimation\n\nanimationend — A CSS animation is complete\n\nanimationiteration — CSS animation is repeated\n\nanimationstart — CSS animation has started\n\n\n\n-------------------------------------------\n\nOther\n\n-------------------------------------------\n\ntransitionend — Fired when a CSS transition has completed\n\nonmessage — A message is received through the event source\n\nonoffline — Browser starts to work offline\n\nononline — The browser starts to work online\n\nonpopstate — When the window’s history changes\n\nonshow — A <menu> element is shown as a context menu\n\nonstorage — A Web Storage area is updated\n\nontoggle — The user opens or closes the <details> element\n\nonwheel — Mouse wheel rolls up or down over an element\n\nontouchcancel — Screen touch is interrupted\n\nontouchend — User finger is removed from a touch screen\n\nontouchmove — A finger is dragged across the screen\n\nontouchstart — Finger is placed on touch screen\n\n\n\n-------------------------------------------\n\nErrors\n\n-------------------------------------------\n\ntry — Lets you define a block of code to test for errors\n\ncatch — Set up a block of code to execute in case of an error\n\nthrow — Create custom error messages instead of the standard\n\nJavaScript errors\n\nfinally — Lets you execute code, after try and catch, regardless of\n\nthe result\n\nError Name Values\n\nname — Sets or returns the error name\n\nmessage — Sets or returns an error message in string from\n\nEvalError — An error has occurred in the eval() function\n\nRangeError — A number is “out of range”\n\nReferenceError — An illegal reference has occurred\n\nSyntaxError — A syntax error has occurred\n\nTypeError — A type error has occurred\n\nURIError — An encodeURI() error has occurred\n"}console.log("jsHelp loaded");